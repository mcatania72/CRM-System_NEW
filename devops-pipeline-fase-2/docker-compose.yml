version: '3.8'

# docker-compose.yml per la FASE 2: Containerizzazione Completa con PostgreSQL

services:
  # 1. Servizio Database PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: crm-postgres-fase2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: crm
    volumes:
      - crm-pgdata-fase2:/var/lib/postgresql/data
    ports:
      - "4002:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crm"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # 2. Servizio Backend
  backend:
    build:
      context: ../backend # Percorso CORRETTO
      dockerfile: Dockerfile
    container_name: crm-backend-fase2
    depends_on:
      postgres:
        condition: service_healthy # Attende che il DB sia pronto
    environment:
      - NODE_ENV=production
      - JWT_SECRET=your-super-secret-jwt-key-fase2
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=admin123
      - DB_DATABASE=crm
      - PORT=4001
      - FRONTEND_URL=http://localhost:4000
    ports:
      - "4001:4001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/healthcheck.sh"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 3. Servizio Frontend
  frontend:
    build:
      context: ../frontend # Percorso CORRETTO
      dockerfile: Dockerfile
    container_name: crm-frontend-fase2
    depends_on:
      - backend
    ports:
      - "4000:80"
    restart: unless-stopped

volumes:
  crm-pgdata-fase2:
    driver: local