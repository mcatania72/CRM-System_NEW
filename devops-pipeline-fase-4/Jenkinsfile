// Jenkinsfile per la FASE 4: Integrazione Sicurezza di Base (Versione Pulita)

pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'devops-pipeline-fase-2/docker-compose.yml'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo '1. Clonazione del repository...'
                    cleanWs()
                    git url: 'https://github.com/mcatania72/CRM-System_NEW.git', branch: 'main'
                }
            }
        }

        // --- STAGE DI SICUREZZA ---
        stage('Security Analysis') {
            parallel {
                stage('Dependency Check') {
                    steps {
                        script {
                            echo '2a. Esecuzione NPM Audit...'
                            // Usiamo un'immagine Docker con Node per eseguire l'audit
                            // in un ambiente pulito, senza installare nulla sull'agente Jenkins.
                            sh 'docker run --rm -v $(pwd)/backend:/app -w /app node:18-alpine npm audit --audit-level=high'
                            sh 'docker run --rm -v $(pwd)/frontend:/app -w /app node:18-alpine npm audit --audit-level=high'
                        }
                    }
                }
                stage('SAST with SonarQube') {
                    steps {
                        // Assumiamo che SonarQube sia configurato in Jenkins -> Manage Jenkins -> Configure System
                        withSonarQubeEnv('SonarQube') {
                            script {
                                echo '2b. Esecuzione analisi SAST con SonarQube...'
                                // Usiamo lo scanner di SonarQube che Jenkins conosce.
                                // Assicurati che sia installato tramite Manage Jenkins -> Global Tool Configuration
                                def scannerHome = tool 'SonarScanner'
                                sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=devops-pipeline-fase-4/security/sonarqube-config.properties"
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo '3. Avvio ambiente completo per test...'
                    sh "docker-compose -f ${env.COMPOSE_FILE} up --build -d"
                    
                    echo 'Attendo 45 secondi per la stabilizzazione...'
                    sleep 45

                    echo '4. Esecuzione dei test di validazione...'
                    sh 'chmod +x devops-pipeline-fase-2/test-containers.sh'
                    sh './devops-pipeline-fase-2/test-containers.sh'
                }
            }
        }
    }

    post {
        always {
            script {
                echo '5. Pulizia dell ambiente Docker...'
                sh "docker-compose -f ${env.COMPOSE_FILE} down --volumes"
            }
        }
    }
}
