# FASE 6: Frontend Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: crm-system
  labels:
    app: frontend
    component: web
    tier: frontend
spec:
  replicas: 2  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: frontend
      component: web
  template:
    metadata:
      labels:
        app: frontend
        component: web
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/health"
    spec:
      # Security context
      securityContext:
        runAsUser: 101  # nginx user
        runAsGroup: 101
        runAsNonRoot: true
        fsGroup: 101
      
      containers:
      - name: frontend
        image: crm-frontend:latest  # Image buildato dalla FASE 2
        imagePullPolicy: IfNotPresent
        
        # Resource allocation leggero per frontend statico
        resources:
          requests:
            memory: "128Mi"    # Minimo per nginx + static files
            cpu: "50m"         # Minimo CPU
          limits:
            memory: "256Mi"    # Max memory
            cpu: "200m"        # Max CPU
        
        # Environment variables per nginx config
        env:
        - name: BACKEND_URL
          value: "http://backend-service:4001"
        - name: API_BASE_URL
          value: "/api"
        
        # Port exposure
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        
        # Health checks per nginx
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe veloce per frontend statico
        startupProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10  # 50 secondi max
          successThreshold: 1
        
        # Volume mounts per nginx config personalizzata (se necessario)
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      
      # Volumes
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-nginx-config
      
      # Restart policy
      restartPolicy: Always
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Grace period
      terminationGracePeriodSeconds: 30
      
      # Affinity per distribuzione
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname
---
# ConfigMap per configurazione nginx personalizzata
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-config
  namespace: crm-system
  labels:
    app: frontend
    component: web
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        # Gzip compression
        gzip on;
        gzip_types text/plain text/css application/javascript application/json;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Main application route
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
            add_header Cache-Control "public, immutable";
        }
        
        # API proxy to backend
        location /api/ {
            proxy_pass http://backend-service:4001/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
        
        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
