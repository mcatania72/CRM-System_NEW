// Jenkinsfile per la FASE 3: CI/CD Base con PostgreSQL (Approccio di Patch Semplificato)

pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'devops-pipeline-fase-2/docker-compose.yml'
        TEST_SCRIPT_PATH = 'devops-pipeline-fase-2/test-containers.sh'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo '1. Clonazione del repository...'
                    cleanWs()
                    git url: 'https://github.com/mcatania72/CRM-System_NEW.git', branch: 'main'
                }
            }
        }

        // FASE DI DEBUG SEMPLIFICATA
        stage('Patch Test Script') {
            steps {
                script {
                    echo 'DEBUG: Forzo la correzione dello script di test sovrascrivendolo...'
                    // Usiamo echo con virgolette singole per evitare problemi di interpretazione
                    // e reindirizziamo l'output per sovrascrivere il file.
                    sh '''
                    cp devops-pipeline-fase-2/test-containers.sh devops-pipeline-fase-2/test-containers.sh.bak
                    echo '#!/bin/bash' > devops-pipeline-fase-2/test-containers.sh
                    echo 'set -e' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'LOG_DIR="$SCRIPT_DIR/.logs"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'mkdir -p "$LOG_DIR"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'LOG_FILE="$LOG_DIR/test-containers.log"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'COMPOSE_FILE="$SCRIPT_DIR/docker-compose.yml"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'RED=\'\033[0;31m\'' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'GREEN=\'\033[0;32m\'' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'YELLOW=\'\033[1;33m\'' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'BLUE=\'\033[0;34m\'' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'NC=\'\033[0m\'' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'log() { echo "[$(date \'\'+%Y-%m-%d %H:%M:%S\'\')] $1" | tee -a "$LOG_FILE"; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'print_status() { echo -e "${BLUE}[INFO]${NC} $1"; log "$1"; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; log "SUCCESS: $1"; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'print_error() { echo -e "${RED}[ERROR]${NC} $1"; log "ERROR: $1"; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; log "WARNING: $1"; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'check_container_health() { print_status "Verifica dello stato di salute dei container..."; services=$(docker-compose -f "$COMPOSE_FILE" config --services); all_healthy=true; for service in $services; do state=$(docker-compose -f "$COMPOSE_FILE" ps -q "$service" | xargs docker inspect -f \'\''{{.State.Status}}\'\'' 2>/dev/null || echo "error"); if [ "$state" != "running" ]; then print_error "✗ Servizio \'\'$service\'\'' non è in esecuzione (stato: $state)."; all_healthy=false; continue; fi; health=$(docker-compose -f "$COMPOSE_FILE" ps -q "$service" | xargs docker inspect -f \'\''{{if .State.Health}}{{.State.Health.Status}}{{else}}not-defined{{end}}\'\'' 2>/dev/null || echo "error"); case "$health" in "healthy") print_success "✓ Servizio \'\'$service\'\'' è in esecuzione e healthy.";; "starting") print_warning "✗ Servizio \'\'$service\'\'' è ancora in fase di avvio (starting). Considerato non healthy per il test."; all_healthy=false;; "not-defined") print_success "✓ Servizio \'\'$service\'\'' è in esecuzione (nessun health check definito).";; *) print_error "✗ Servizio \'\'$service\'\'' non è healthy (stato: $health)."; all_healthy=false;; esac; done; if [ "$all_healthy" = false ]; then return 1; fi; return 0; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'run_api_login_test() { print_status "Esecuzione API Login Test..."; response=$(curl -s -o /dev/null -w "%\{http_code\}" -X POST http://localhost:4001/api/auth/login -H "Content-Type: application/json" -d \'\''{"email":"admin@crm.local","password":"admin123"}\'\'); if [ "$response" -eq 200 ]; then print_success "✓ API Login Test superato (HTTP $response)."; return 0; else print_error "✗ API Login Test fallito (HTTP $response)."; print_warning "Questo potrebbe indicare un problema di comunicazione backend-db o credenziali errate."; return 1; fi; }' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo -e "${BLUE}"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo "===================================================="' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo "   CRM System - Test Containers (PostgreSQL)"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo "   FASE 2: Containerizzazione Completa"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo -e "${NC}"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'rm -f "$LOG_FILE"' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'failed_tests=()' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'print_status "Attendo 15 secondi per la stabilizzazione dei servizi..."' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'sleep 15' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'if ! check_container_health; then failed_tests+=("Health Check Container"); fi' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'if ! run_api_login_test; then failed_tests+=("API Login Test"); fi' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'echo -e "\n=======================================\n   RIEPILOGO TEST CONTAINER\n======================================="' >> devops-pipeline-fase-2/test-containers.sh
                    echo 'if [ ${#failed_tests[@]} -eq 0 ]; then print_success "✓ Tutti i test sui container sono stati completati con successo!"; exit 0; else print_error "✗ Alcuni test sui container sono falliti:"; for test in "${failed_tests[@]}"; do echo -e "${RED}  - $test${NC}"; done; exit 1; fi' >> devops-pipeline-fase-2/test-containers.sh
                    '''
                }
            }
        }

        stage('Environment Validation') {
            steps {
                script {
                    echo '2. Verifica dei prerequisiti sull agente Jenkins...'
                    sh 'chmod +x devops-pipeline-fase-2/prerequisites-docker.sh'
                    sh './devops-pipeline-fase-2/prerequisites-docker.sh'
                }
            }
        }

        stage('Build and Test with Docker Compose') {
            steps {
                script {
                    echo '3. Avvio dell intera applicazione con Docker Compose...'
                    sh "docker-compose -f ${env.COMPOSE_FILE} up --build -d"
                    
                    echo 'Attendo 30 secondi per la stabilizzazione dei servizi...'
                    sleep 30

                    echo '4. Esecuzione dei test di validazione sui container...'
                    sh "chmod +x ${env.TEST_SCRIPT_PATH}"
                    sh "./${env.TEST_SCRIPT_PATH}"
                }
            }
        }
    }

    post {
        always {
            script {
                echo '5. Pulizia dell ambiente Docker...'
                sh "docker-compose -f ${env.COMPOSE_FILE} down --volumes"
            }
        }
    }
}
